{"version":3,"sources":["components/Encoder.tsx","utils/dtmf.ts","components/Decoder.tsx","components/App.tsx","index.tsx"],"names":["Encoder","dtmf","React","useState","duration","setDuration","Typography","gutterBottom","Slider","value","onChange","event","newValue","Array","isArray","min","max","step","valueLabelDisplay","valueLabelFormat","x","aria-labelledby","Container","maxWidth","Grid","container","spacing","item","xs","Button","variant","onClick","playNote","COL","ROW","LETTERS","split","DTMF","context","allFreqs","decodedMessage","letterHistory","lastLetter","this","window","AudioContext","webkitAudioContext","sym","index","findIndex","col","length","row","Math","floor","play","callback","navigator","mediaDevices","getUserMedia","audio","video","then","stream","source","createMediaStreamSource","processor","createScriptProcessor","connect","destination","onaudioprocess","e","mags","map","freq","goertzelMag","inputBuffer","sampleRate","getChannelData","letter","frequenciesToDtmf","push","splice","every","freq1","freq2","osc1","createOscillator","osc2","type","gain1","createGain","gain2","gain","setTargetAtTime","currentTime","frequency","start","stop","samples","k","omega","PI","sine","sin","cosine","cos","coeff","q0","q1","q2","i","real","imag","sqrt","freqs","slice","mag","highestRow","reduce","prev","cur","highestCol","letterIndex","Decoder","setLetter","forceUpdate","set","useForceUpdate","decodeCallback","fullWidth","captureDTMF","Chip","component","label","color","getDecodedMessage","onDelete","clearDecodedMessage","App","style","padding","Paper","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2b794e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Grid, Button, Typography, Slider, Container } from '@material-ui/core';\r\nimport { DTMF } from '../utils/dtmf';\r\n\r\ninterface Props {\r\n    dtmf: DTMF;\r\n}\r\n\r\nconst Encoder = ({ dtmf }: Props) => {\r\n    const [duration, setDuration] = React.useState(0.2);\r\n\r\n    const handleDurationChange = (event: any, newValue: number | number[]) => {\r\n        if (!Array.isArray(newValue)) {\r\n            setDuration(newValue);\r\n            dtmf.setDuration(newValue);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Typography gutterBottom>\r\n                Use this slider to set the duration of the tones.\r\n            </Typography>\r\n            <Slider\r\n                value={duration}\r\n                onChange={handleDurationChange}\r\n                min={0.1}\r\n                max={2.0}\r\n                step={0.1}\r\n                valueLabelDisplay={\"auto\"}\r\n                valueLabelFormat={x => `${x}s`}\r\n                aria-labelledby=\"continuous-slider\" />\r\n            <Typography gutterBottom>\r\n                Use this dialpad to create the corresponding DTMF tones.\r\n            </Typography>\r\n            <Container maxWidth=\"xs\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('1')}>1</Button>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('2')}>2</Button>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('3')}>3</Button>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('A')}>A</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('4')}>4</Button>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('5')}>5</Button>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('6')}>6</Button>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('B')}>B</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('7')}>7</Button>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('8')}>8</Button>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('9')}>9</Button>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('C')}>C</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('*')}>*</Button>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('0')}>0</Button>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('#')}>#</Button>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Button variant=\"contained\" onClick={() => dtmf.playNote('D')}>D</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Encoder;\r\n","/**\r\n * This class is able to encode and output DTMF singals,\r\n * or to capture and decode them.\r\n */\r\n\r\nconst COL = [1209, 1336, 1477, 1633];\r\nconst ROW = [697, 770, 852, 941];\r\nconst LETTERS = \"123A456B789C*0#D\".split('');\r\n\r\nconst NUM_SAMPLES = 512;\r\nconst MAGNITUDE_EPSILON = 0.05;\r\nconst LETTER_HISTORY = 10;\r\n\r\nexport class DTMF {\r\n    private context: AudioContext;\r\n    private duration: number;\r\n    private allFreqs: number[];\r\n    private decodedMessage: string;\r\n    private letterHistory: Array<string | null>;\r\n    private lastLetter: string | null;\r\n\r\n    /**\r\n     * Initialises a new DTMF Encoder/Decoder.\r\n     */\r\n    constructor() {\r\n        this.context = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n        this.duration = 0.2;\r\n        this.allFreqs = [...ROW, ...COL];\r\n        this.decodedMessage = \"\";\r\n        this.letterHistory = [];\r\n        this.lastLetter = null;\r\n    }\r\n\r\n    /**\r\n     * Sets the new duration for a single note.\r\n     * \r\n     * @param duration the new duration\r\n     */\r\n    setDuration(duration: number) {\r\n        this.duration = duration;\r\n    }\r\n\r\n    /**\r\n     * Getter for the decoded message.\r\n     */\r\n    getDecodedMessage(): string {\r\n        return this.decodedMessage;\r\n    }\r\n\r\n    /**\r\n     * Clears the decoded message.\r\n     */\r\n    clearDecodedMessage() {\r\n        this.decodedMessage = \"\";\r\n    }\r\n\r\n    /**\r\n     * Plays a single note.\r\n     * A note can be a digit from 0 to 9, *, #, or the letters from A to D.\r\n     * \r\n     * @param sym the note to play\r\n     */\r\n    playNote(sym: string) {\r\n        const index = LETTERS.findIndex(x => x === sym);\r\n        if (index >= 0) {\r\n            const col = index % COL.length;\r\n            const row = Math.floor(index / COL.length);\r\n\r\n            this.play(COL[col], ROW[row]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts an audio recoding and decodes the incomming DTMF signals.\r\n     * \r\n     * @param callback a callback that is fired when the input changes\r\n     */\r\n    captureDTMF(callback: (x: string | null) => void) {\r\n        const handleSuccess = (stream: MediaStream) => {\r\n            const source = this.context.createMediaStreamSource(stream);\r\n            const processor = this.context.createScriptProcessor(NUM_SAMPLES, 1, 1);\r\n\r\n            source.connect(processor);\r\n            processor.connect(this.context.destination);\r\n\r\n            processor.onaudioprocess = (e) => {\r\n\r\n                const mags = this.allFreqs.map(freq => {\r\n                    return this.goertzelMag(freq, e.inputBuffer.sampleRate, e.inputBuffer.getChannelData(0));\r\n                });\r\n\r\n                const letter = this.frequenciesToDtmf(mags);\r\n                const newLen = this.letterHistory.push(letter);\r\n                if (newLen > LETTER_HISTORY) {\r\n                    this.letterHistory.splice(0, 1);\r\n                }\r\n\r\n                if (this.letterHistory.every((x) => x === this.letterHistory[0]) &&\r\n                    this.letterHistory[0] !== this.lastLetter) {\r\n                    \r\n                    this.lastLetter = letter;\r\n                    this.decodedMessage += letter || \"\";\r\n                    callback(letter);\r\n                }\r\n            };\r\n        };\r\n\r\n        navigator.mediaDevices.getUserMedia({ audio: true, video: false })\r\n            .then(handleSuccess);\r\n    }\r\n\r\n    /**\r\n     * This helper method plays a two-frequency note.\r\n     * \r\n     * @param freq1 the first frequency\r\n     * @param freq2 the second frequency\r\n     */\r\n    private play(freq1: number, freq2: number) {\r\n        let osc1 = this.context.createOscillator();\r\n        let osc2 = this.context.createOscillator();\r\n\r\n        osc1.type = \"sine\";\r\n        osc2.type = \"sine\";\r\n\r\n        let gain1 = this.context.createGain();\r\n        let gain2 = this.context.createGain();\r\n        osc1.connect(gain1);\r\n        gain1.connect(this.context.destination);\r\n        gain1.gain.value = 0.1;\r\n        gain1.gain.setTargetAtTime(0, this.context.currentTime + this.duration, 0.015);\r\n        osc2.connect(gain2);\r\n        gain2.connect(this.context.destination);\r\n        gain2.gain.value = 0.1;\r\n        gain2.gain.setTargetAtTime(0, this.context.currentTime + this.duration, 0.015);\r\n\r\n        osc1.frequency.value = freq1;\r\n        osc2.frequency.value = freq2;\r\n        osc1.start();\r\n        osc2.start();\r\n        osc1.stop(this.context.currentTime + this.duration + 0.1);\r\n        osc2.stop(this.context.currentTime + this.duration + 0.1);\r\n    }\r\n\r\n    /**\r\n     * Calculates the magnitude of a target frequency in some samples using the\r\n     * Goertzel Algorithm.\r\n     * \r\n     * @param freq the target frequency\r\n     * @param sampleRate the sample rate\r\n     * @param samples the actual samples\r\n     * @returns the calculated magnitude\r\n     */\r\n    private goertzelMag(freq: number, sampleRate: number, samples: Float32Array): number {\r\n        const k = Math.floor(0.5 + ((NUM_SAMPLES * freq) / sampleRate));\r\n        const omega = (2 * Math.PI * k) / NUM_SAMPLES;\r\n        const sine = Math.sin(omega);\r\n        const cosine = Math.cos(omega);\r\n        const coeff = cosine * 2;\r\n\r\n        let q0 = 0;\r\n        let q1 = 0;\r\n        let q2 = 0;\r\n\r\n        for (let i = 0; i < NUM_SAMPLES; i++) {\r\n            q0 = coeff * q1 - q2 + samples[i];\r\n            q2 = q1;\r\n            q1 = q0;\r\n        }\r\n\r\n        const real = (q1 - q2 * cosine);\r\n        const imag = (q2 * sine);\r\n\r\n        return Math.sqrt(real * real + imag * imag);\r\n    }\r\n\r\n    /**\r\n     * Calculates the detected letter from 8 magnitudes.\r\n     * \r\n     * @param freqs 8 magnitudes\r\n     */\r\n    private frequenciesToDtmf(freqs: number[]): string | null {\r\n        const row = freqs.slice(0, 4).map((x, index) => ({ index, freq: ROW[index], mag: x }));\r\n        const col = freqs.slice(4, 8).map((x, index) => ({ index, freq: COL[index], mag: x }));\r\n\r\n        const highestRow = row.reduce((prev, cur) => prev.mag > cur.mag ? prev : cur);\r\n        const highestCol = col.reduce((prev, cur) => prev.mag > cur.mag ? prev : cur);\r\n\r\n        if (highestCol.mag < MAGNITUDE_EPSILON || highestRow.mag < MAGNITUDE_EPSILON) {\r\n            return null;\r\n        }\r\n\r\n        const letterIndex = highestRow.index * 4 + highestCol.index;\r\n\r\n        return LETTERS[letterIndex];\r\n    }\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Button, Typography, Container, Chip } from '@material-ui/core';\r\nimport { DTMF } from '../utils/dtmf';\r\n\r\ninterface Props {\r\n    dtmf: DTMF;\r\n}\r\n\r\n// Hack based on https://stackoverflow.com/a/53837442\r\nfunction useForceUpdate(){\r\n    const [, set] = useState(true); //boolean state\r\n    return () => set(value => !value); // toggle the state to force render\r\n}\r\n\r\nconst Decoder = ({ dtmf }: Props) => {\r\n    const [letter, setLetter] = useState<string>(\"??\");\r\n    const forceUpdate = useForceUpdate();\r\n\r\n    const decodeCallback = (letter: string | null) => {\r\n        setLetter(letter || \"??\");\r\n    };\r\n\r\n    const clearMessage = () => {\r\n        dtmf.clearDecodedMessage();\r\n        forceUpdate();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Typography gutterBottom>\r\n                You can capture the sound of your microphone. You should use a different device to generate the tones.\r\n            </Typography>\r\n            <Container maxWidth=\"xs\">\r\n                <Button fullWidth variant=\"contained\" onClick={() => dtmf.captureDTMF(decodeCallback)}>Capture Audio</Button>\r\n            </Container>\r\n            <br /><br />\r\n            <Typography gutterBottom>\r\n                Letter: <Chip component=\"span\" label={letter} color=\"primary\" />\r\n            </Typography>\r\n            <Typography gutterBottom>\r\n                Number: {dtmf.getDecodedMessage().length > 0 && (\r\n                    <Chip component=\"span\" label={dtmf.getDecodedMessage()} onDelete={clearMessage} />\r\n                )}\r\n            </Typography>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Decoder;\r\n","import React from 'react';\r\nimport { Container, Paper, Typography } from '@material-ui/core';\r\nimport Encoder from './Encoder';\r\nimport { DTMF } from '../utils/dtmf';\r\nimport Decoder from './Decoder';\r\n\r\nconst dtmf = new DTMF();\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Container maxWidth=\"md\" style={{ padding: 20 }}>\r\n      <Paper style={{ padding: 10 }}>\r\n        <Typography variant=\"h3\">\r\n          DTMF Encoder/Decoder\r\n        </Typography>\r\n        <Typography gutterBottom>\r\n          This tool alows you to encode or decode DTMF (dual-tone multi-frequency) signals.\r\n        </Typography>\r\n        <br />\r\n\r\n        <Typography variant=\"h4\">\r\n          DTMF Encoder\r\n        </Typography>\r\n        <Encoder dtmf={dtmf} />\r\n\r\n        <br />\r\n        <Typography variant=\"h4\">\r\n          DTMF Decoder\r\n        </Typography>\r\n        <Decoder dtmf={dtmf} />\r\n        <br />\r\n        <Typography variant=\"caption\" gutterBottom>\r\n          A tool by <a href=\"https://github.com/warlordsam07\">WarlordSam07</a>.\r\n        </Typography>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}